'use strict'

alert('Привет'); alert('Мир');

alert('Привет')
alert('Мир')

Большинство руководств по стилю кода рекомендуют ставить точку с запятой после каждой инструкции.

alert('После этого сообщения ошибка');
[1,2].forEach(alert)


Точка с запятой не требуется после блоков кода {…} и синтаксических конструкций с ними, 
таких как, например, циклы:

function f() {
	// после объявления функции ; не обязательно
}

for( ; ; ){
	// после цикла ; необязательно
}


Впрочем, если даже мы и поставим «лишнюю» точку с запятой, ошибки не будет. 
Она просто будет проигнорирована.

Строгий режим
Чтобы по максимуму использовать возможности современного JavaScript, 
все скрипты рекомендуется начинать с добавления директивы "use strict".

Эту директиву следует размещать в первой строке скрипта или в начале тела функции.
Без "use strict" код также запустится, но некоторые возможности будут работать в «режиме совместимости» со старыми версиями языка JavaScript. 
Нам же предпочтительнее современное поведение.

Некоторые конструкции языка (например, классы, которые нам ещё предстоит изучить) 
включают строгий режим по умолчанию.

Переменные

let
const (константа, т.е. изменению не подлежит)
var (устаревший способ, подробности позже)

Имя переменной может включать:

Буквы и цифры, однако цифра не может быть первым символом.
Символы $ и _ используются наряду с буквами.
Иероглифы и символы нелатинского алфавита также допустимы, но обычно не используются.

Переменные типизируются динамически. В них могут храниться любые значения:

let x =5;
x = "Максим";

Всего существует 8 типов данных:

number для целых и вещественных чисел,
bigint для работы с целыми числами произвольной длины,
string для строк,
boolean для логических значений истинности или ложности: true/false,
null – тип с единственным значением null, т.е. «пустое значение» или «значение не существует»,
undefined – тип с единственным значением undefined, т.е. «значение не задано»,
object и symbol – сложные структуры данных и уникальные идентификаторы; их мы ещё не изучили.
Оператор typeof возвращает тип значения переменной, с двумя исключениями:

typeof null == "object" // ошибка в языке
typeof function() {} == 'function' // именно для функции??


Взаимодействие с посетителем

prompt(question, [default])  Задаёт вопрос question и возвращает то, что ввёл посетитель, 
либо null, если посетитель нажал на кнопку «Отмена».

confirm(question) Задаёт вопрос question и предлагает выбрать «ОК» или «Отмена». 
Выбор возвращается в формате true/false.

alert(message)
Выводит сообщение message.

Все эти функции показывают модальные окна, они останавливают выполнение кода и не позволяют посетителю взаимодействовать со страницей, 
пока не будет дан ответ на вопрос.

let userName = prompt("введите имя"," ")
let isTeaWanted - confirm ('Хочешь чаю');

alert('Посетитель: ' = userName);
alert(userName); // true/false

Операторы

Арифметические
Простые * + - /, а также деление по модулю % и возведение в степень **.

Бинарный плюс + объединяет строки. А если одним из операндов является строка, 
то второй тоже будет конвертирован в строку:

Операторы присваивания
let a = b;

Битовые операции

Битовые операторы работают с 32-битными целыми числами на самом низком, побитовом уровне. 
Подробнее об их использовании можно прочитать на ресурсе MDN и в разделе Побитовые операторы.

Условный оператор

Единственный оператор с тремя параметрами: cond ? resultA : resultB. 
Если условие cond истинно, возвращается resultA, иначе – resultB.

Логические операторы

Логические И &&, ИЛИ || используют так называемое «ленивое вычисление» и возвращают значение, 
на котором оно остановилось (не обязательно true или false). Логическое НЕ ! конвертирует 
операнд в логический тип и возвращает инвертированное значение.

Сравнение
Проверка на равенство == значений разных типов конвертирует их в число (за исключением null и undefined, 
которые могут равняться только друг другу), так что примеры ниже равны:

alert( 0 == false ); 
alert( 0 == '' ); 

Оператор строгого равенства === не выполняет конвертирования: 
разные типы для него всегда означают разные значения.

Циклы

while (condition) {
	
}

do(
) while(condition);

for(let i =0; i<5; i++){
	...
}
Переменная, объявленная в цикле for(let...), 
видна только внутри цикла. Но мы также можем опустить let и 
переиспользовать существующую переменную.

Директивы break/continue позволяют выйти из цикла/текущей итерации. 
Используйте метки для выхода из вложенных циклов.

Конструкция «switch»

let age = prompt("Сколько вам лет?", " ");
switch(age) {
	case 18:
		alert('Good');
	case "18":
		alert('not working');
		break
	default:
		alert('Любое занчение не равное 18');
}

Функции

Function Declaration: функция в основном потоке кода

function sum(a,b) {
	let result= a+b
	return result
}

Function Expression:

let sum = function(a,b) {
	let result = a+b;
	return result
};

Стрелочные функции:
выражение в правой части

let sum =(a,b) => a+b

многострочный код в фигурных скобках

let sum = (a,b) =>{
	//
	//
	return a+b

}

без аргументов

let sayHi =() => alert('hi');

с одним аргументом

let double = n => n *2;


У функций могут быть локальные переменные: т.е. объявленные в теле функции. Такие переменные видимы только внутри функции.
У параметров могут быть значения по умолчанию: function sum(a = 1, b = 2) {...}.
Функции всегда что-нибудь возвращают. Если нет оператора return, результатом будет undefined.